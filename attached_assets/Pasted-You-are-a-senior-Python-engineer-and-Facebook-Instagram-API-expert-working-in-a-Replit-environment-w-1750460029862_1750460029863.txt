You are a senior Python engineer and Facebook/Instagram API expert working in a Replit environment with Streamlit. I need a single comprehensive prompt (with all code snippets and instructions in one block) that I can copy into my AI/Replit assistant to patch my code. The goal is to:

1. Fetch paid campaign data including ad creative previews (images, text).
2. Fetch Instagram media insights in long format including preview URLs and permalinks.
3. Improve Streamlit UI: show actual creatives/posts instead of raw IDs, with readable charts.
4. Include fallback logic for Page Insights metadata (if needed).
5. Provide testing snippets.

Below is the full prompt. Copy it entirely into your AI assistant so it can apply these patches:

---
You are a senior Python engineer and Facebook/Instagram API expert. Patch the code in Replit (Streamlit app) to implement the following:

## 1. Paid campaign fetch with creative previews
- In `fetch_paid.py` (or equivalent), after fetching campaign performance metrics, retrieve each campaignâ€™s ads and their creatives:
  1. Use Facebook Business SDK (`facebook_business`):
     ```python
     from facebook_business.adobjects.campaign import Campaign
     from facebook_business.adobjects.ad import Ad
     from facebook_business.adobjects.adcreative import AdCreative
     ```
  2. For each `campaign_id`, fetch its ads:
     ```python
     ads = Campaign(campaign_id).get_ads(fields=[
         Ad.Field.id,
         Ad.Field.name,
         Ad.Field.creative
     ])
     ```
  3. For each `ad` in `ads`:
     - Extract `ad_id = ad[Ad.Field.id]`, `ad_name = ad[Ad.Field.name]`
     - Get `creative_info = ad[Ad.Field.creative]` and `creative_id = creative_info.get('id')`
     - If `creative_id` exists, fetch creative details:
       ```python
       creative = AdCreative(creative_id).api_get(fields=[
           AdCreative.Field.name,          # creative name
           AdCreative.Field.body,          # text/body
           AdCreative.Field.title,         # title if available
           AdCreative.Field.image_url,     # image preview URL
           AdCreative.Field.thumbnail_url, # for videos
           AdCreative.Field.object_url     # link or call-to-action URL
       ])
       ```
     - Extract available fields: `creative_name`, `creative_body`, `creative_title`, `creative_image_url`, `creative_thumbnail_url`, `creative_object_url`. If a field is missing or None, handle gracefully (log warning and set to None).
  4. Combine performance metrics and creative fields into a pandas DataFrame with columns:
     ```
     campaign_id,
     campaign_name,
     ad_id,
     ad_name,
     creative_id,
     creative_name,
     creative_body,
     creative_title,
     creative_image_url,
     creative_thumbnail_url,
     creative_object_url,
     impressions,
     clicks,
     spend,
     reach,
     frequency,
     ctr,
     cpc,
     date_start,
     date_stop,
     ...
     ```
  5. Logging: if fetching ads or creatives fails, log warning: 
     ```python
     logger.warning(f"Failed to fetch creative for ad {ad_id}: {e}")
     ```
  6. Return the DataFrame for Streamlit to display.

- Example snippet inside `fetch_paid.py` after you have campaign metrics DataFrame `df_campaigns`:
  ```python
  from facebook_business.adobjects.campaign import Campaign
  from facebook_business.adobjects.ad import Ad
  from facebook_business.adobjects.adcreative import AdCreative

  def enrich_with_creatives(df_campaigns):
      records = []
      for _, row in df_campaigns.iterrows():
          campaign_id = row['campaign_id']
          campaign_name = row.get('campaign_name')
          try:
              ads = Campaign(campaign_id).get_ads(fields=[
                  Ad.Field.id, Ad.Field.name, Ad.Field.creative
              ])
          except Exception as e:
              logger.warning(f"Failed to fetch ads for campaign {campaign_id}: {e}")
              continue
          for ad in ads:
              ad_id = ad.get(Ad.Field.id)
              ad_name = ad.get(Ad.Field.name)
              creative_id = None
              creative_name = creative_body = creative_title = None
              creative_image_url = creative_thumbnail_url = creative_object_url = None
              creative_info = ad.get(Ad.Field.creative)
              if creative_info:
                  creative_id = creative_info.get('id')
                  if creative_id:
                      try:
                          creative = AdCreative(creative_id).api_get(fields=[
                              AdCreative.Field.name,
                              AdCreative.Field.body,
                              AdCreative.Field.title,
                              AdCreative.Field.image_url,
                              AdCreative.Field.thumbnail_url,
                              AdCreative.Field.object_url
                          ])
                          creative_name = creative.get(AdCreative.Field.name)
                          creative_body = creative.get(AdCreative.Field.body)
                          creative_title = creative.get(AdCreative.Field.title)
                          creative_image_url = creative.get(AdCreative.Field.image_url)
                          creative_thumbnail_url = creative.get(AdCreative.Field.thumbnail_url)
                          creative_object_url = creative.get(AdCreative.Field.object_url)
                      except Exception as e:
                          logger.warning(f"Failed to fetch creative details for creative {creative_id}: {e}")
              # Merge with performance row
              record = {
                  "campaign_id": campaign_id,
                  "campaign_name": campaign_name,
                  "ad_id": ad_id,
                  "ad_name": ad_name,
                  "creative_id": creative_id,
                  "creative_name": creative_name,
                  "creative_body": creative_body,
                  "creative_title": creative_title,
                  "creative_image_url": creative_image_url,
                  "creative_thumbnail_url": creative_thumbnail_url,
                  "creative_object_url": creative_object_url,
              }
              # Copy performance metrics from row
              for col in ['impressions','clicks','spend','reach','frequency','ctr','cpc','date_start','date_stop']:
                  record[col] = row.get(col)
              records.append(record)
      if not records:
          return pd.DataFrame(columns=[
              "campaign_id","campaign_name","ad_id","ad_name","creative_id","creative_name",
              "creative_body","creative_title","creative_image_url","creative_thumbnail_url",
              "creative_object_url","impressions","clicks","spend","reach","frequency","ctr","cpc",
              "date_start","date_stop"
          ])
      return pd.DataFrame(records)
